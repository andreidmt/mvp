# CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details

version: 2.1

# Executors - https://circleci.com/docs/2.0/executor-intro/
#
# The underlying technology or environment in which to run a job

executors:
  gitleaks:
    docker:
      - image: zricethezav/gitleaks:latest
  aws:
    docker:
      - image: amazon/aws-cli:latest
  node:
    docker:
      - image: cimg/node:18.13

# Commands - https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
#
# Reusable commands that can be invoked with parameters inside a job

commands:
  authenticate_github_npm:
    description: "[bash] Authenticate to GitHub's npm registry"
    parameters:
      token:
        type: string
    steps:
      - run:
          name: "[bash] Avoid hosts unknown for github"
          command: |
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: "[bash] Append GitHub's npm registry auth data to root .npmrc"
          command: |
            echo "//npm.pkg.github.com/:_authToken=<< parameters.token >>" > ../.npmrc


# Jobs - https://circleci.com/docs/2.0/configuration-reference/#jobs
#
# Atomic parts of the pipeline that will be composed and configured in one or
# more Workflows

jobs:
  detect-secrets:
    executor: gitleaks
    working_directory: &JOB_WORKING_DIR "~/r3wy"
    steps:
      - checkout
      - run:
          name: "[gitleaks] Detect secrets in repository history"
          command: |
            gitleaks detect --redact --verbose
      - persist_to_workspace:
          root: &WORKSPACE_ROOT "~/"
          paths:
            - r3wy

  # Required:
  #  - GITHUB_TOKEN: @r3wy packages are private and require a GitHub for install
  setup:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - authenticate_github_npm:
          token: "$GITHUB_TOKEN"
      - run:
          name: "[lerna]: Install packages workspace wide"
          command: |
            npm run setup
      - persist_to_workspace:
          root: *WORKSPACE_ROOT
          paths:
            - r3wy

  test-unit:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - run:
          name: "[typescript]: Typecheck"
          command: |
            npm run typecheck
      - run:
          name: "[eslint, markdownlint]: Lint"
          command: |
            npm run lint
      - run:
          name: "[jest]: Unit test"
          command: "npm run test.unit"

  test-e2e:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - run:
          name: "[cypress]: Test"
          command: |
            npm run test.e2e

  # Required:
  #  - COVERALLS_REPO_TOKEN
  #  - COVERALLS_SERVICE_NAME
  submit-coverage:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - run:
          name: "[c8, coveralls]: Publish test coverage to Coveralls"
          command: "npm run coverage"

  # Required:
  #  - GITHUB_TOKEN: @r3wy packages are private and require a GitHub for install
  #  - GIT_AUTHOR_EMAIL, GIT_AUTHOR_NAME
  #  - GIT_COMMITTER_EMAIL, GIT_COMMITTER_NAME
  release-npm:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - add_ssh_keys:
          fingerprints:
            - "33:c1:08:d6:95:3c:43:a5:96:ac:4a:9b:40:1a:0f:63"
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - authenticate_github_npm:
          token: "$GITHUB_TOKEN"
      - run:
          name:
            "[lerna]: Update version, generate release, publish all non-private packages"
          command: "npm run release"
      - persist_to_workspace:
          root: *WORKSPACE_ROOT
          paths:
            - r3wy

  build-react:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - run:
          name: "[webpack]: Compile application"
          command: |
            npm run build
      - persist_to_workspace:
          root: &WORKSPACE_ROOT "~/"
          paths:
            - r3wy

  # Required:
  #  - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY: `aws-cli` auth
  #  - AWS_S3_BUCKET_NAME:
  deploy-react:
    executor: aws
    working_directory: *JOB_WORKING_DIR
    steps:
      - run:
          name: "[yum] Install packages missing in 'amazon/aws-cli' image"
          command: |
            # tar, gzip: required for unpacking workspace data
            yum install -y tar gzip
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - run:
          name: "[aws]: Upload compiled React App to S3"
          command: |
            # cache everything for 1 week, all assets have hashed names
            aws s3 sync \
              @r3wy.react/dist \
              s3://${AWS_S3_BUCKET_NAME} \
              --delete \
              --cache-control "max-age=86400" \
              --exclude index.html

            # dont cache entry point
            aws s3 sync \
              @r3wy.react/dist \
              s3://${AWS_S3_BUCKET_NAME} \
              --cache-control "no-cache"

  # Required:
  #  - GITHUB_TOKEN: @r3wy packages are private and require a GitHub for install
  #  - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY: `aws-cli` auth
  #  - AWS_REGION: Region lambda functions get deployed to
  deploy-services:
    executor: node
    working_directory: *JOB_WORKING_DIR
    steps:
      - attach_workspace:
          at: *WORKSPACE_ROOT
      - authenticate_github_npm:
          token: "$GITHUB_TOKEN"
      - run:
          name: "[serverless] Deploy service to AWS"
          command: |
            for dir in ./@r3wy.service_*; do
              cd "$dir"
              echo "Deploying \"$dir\""
              npm run deploy;
              cd ..
            done

# Workflows - https://circleci.com/docs/2.0/workflows/
#
# Treat workflows as a jobs/commands pipe:
# cmd1 -p1 lorem | cmd2 -foo bar | ... | cmdN)

workflows:
  release:
    jobs:
      - detect-secrets:
          filters:
            branches:
              only: [main]
      - setup:
          requires: [detect-secrets]
          context:
            - "R3wy - GitHub"
      - test-unit:
          requires: [setup]
      - submit-coverage:
          requires: [test-unit]
          context:
            - "R3wy - Coveralls"
      - release-npm:
          requires: [test-unit]
          context:
            - "R3wy - GitHub"
      - build-react:
          requires: [release-npm]
      - deploy-services:
          requires: [release-npm]
          context:
            - "R3wy - GitHub"
            - "R3wy - AWS @andreidmt"
      - deploy-react:
          requires: [build-react]
          context:
            - "R3wy - AWS @andreidmt"

  test_pr-branches:
    jobs:
      - detect-secrets:
          filters:
            branches:
              ignore: [main]
      - setup:
          requires: [detect-secrets]
      - test-unit:
          requires: [setup]
